// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Tests PasswordResetConfirmContainer Test mounting of component 1`] = `
<Router
  history={
    Object {
      "action": "POP",
      "block": [Function],
      "createHref": [Function],
      "go": [Function],
      "goBack": [Function],
      "goForward": [Function],
      "length": 1,
      "listen": [Function],
      "location": Object {
        "hash": "",
        "pathname": "/",
        "search": "",
        "state": undefined,
      },
      "push": [Function],
      "replace": [Function],
    }
  }
>
  <Provider
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  >
    <Connect(Form(withRouter(ResetConfirm)))
      history={
        Object {
          "push": [MockFunction],
        }
      }
      match={
        Object {
          "params": Object {
            "token": "tcvygbuhijn6789",
          },
        }
      }
      showModal={[MockFunction]}
    >
      <Form(withRouter(ResetConfirm))
        history={
          Object {
            "push": [MockFunction],
          }
        }
        match={
          Object {
            "params": Object {
              "token": "tcvygbuhijn6789",
            },
          }
        }
        resetConfirmActions={[Function]}
        showModal={[MockFunction]}
      >
        <withRouter(ResetConfirm)
          form={
            Object {
              "getFieldDecorator": [Function],
              "getFieldError": [Function],
              "getFieldInstance": [Function],
              "getFieldProps": [Function],
              "getFieldValue": [Function],
              "getFieldsError": [Function],
              "getFieldsValue": [Function],
              "isFieldTouched": [Function],
              "isFieldValidating": [Function],
              "isFieldsTouched": [Function],
              "isFieldsValidating": [Function],
              "isSubmitting": [Function],
              "resetFields": [Function],
              "setFields": [Function],
              "setFieldsInitialValue": [Function],
              "setFieldsValue": [Function],
              "submit": [Function],
              "validateFields": [Function],
              "validateFieldsAndScroll": [Function],
            }
          }
          history={
            Object {
              "push": [MockFunction],
            }
          }
          match={
            Object {
              "params": Object {
                "token": "tcvygbuhijn6789",
              },
            }
          }
          resetConfirmActions={[Function]}
          showModal={[MockFunction]}
        >
          <ResetConfirm
            form={
              Object {
                "getFieldDecorator": [Function],
                "getFieldError": [Function],
                "getFieldInstance": [Function],
                "getFieldProps": [Function],
                "getFieldValue": [Function],
                "getFieldsError": [Function],
                "getFieldsValue": [Function],
                "isFieldTouched": [Function],
                "isFieldValidating": [Function],
                "isFieldsTouched": [Function],
                "isFieldsValidating": [Function],
                "isSubmitting": [Function],
                "resetFields": [Function],
                "setFields": [Function],
                "setFieldsInitialValue": [Function],
                "setFieldsValue": [Function],
                "submit": [Function],
                "validateFields": [Function],
                "validateFieldsAndScroll": [Function],
              }
            }
            history={
              Object {
                "action": "POP",
                "block": [Function],
                "createHref": [Function],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              }
            }
            location={
              Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              }
            }
            match={
              Object {
                "isExact": true,
                "params": Object {},
                "path": "/",
                "url": "/",
              }
            }
            resetConfirmActions={[Function]}
            showModal={[MockFunction]}
          >
            <Form
              className="reset-form"
              colon={true}
              hideRequiredMark={false}
              layout="horizontal"
              onSubmit={[Function]}
              style={
                Object {
                  "textAlign": "left",
                }
              }
            >
              <form
                className="ant-form ant-form-horizontal reset-form"
                onSubmit={[Function]}
                style={
                  Object {
                    "textAlign": "left",
                  }
                }
              >
                <div>
                  <h1>
                    Create your new password
                  </h1>
                </div>
                <FormItem
                  data-test=""
                  hasFeedback={true}
                  label="Password"
                >
                  <Row
                    className="ant-form-item"
                    gutter={0}
                    key="row"
                  >
                    <div
                      className="ant-row ant-form-item"
                    >
                      <Col
                        className="ant-form-item-label"
                      >
                        <div
                          className="ant-col ant-form-item-label"
                        >
                          <label
                            className="ant-form-item-required"
                            htmlFor="password"
                            onClick={[Function]}
                            title="Password"
                          >
                            Password
                          </label>
                        </div>
                      </Col>
                      <Col
                        className="ant-form-item-control-wrapper"
                      >
                        <div
                          className="ant-col ant-form-item-control-wrapper"
                        >
                          <div
                            className="ant-form-item-control"
                          >
                            <span
                              className="ant-form-item-children"
                            >
                              <Input
                                data-__field={
                                  Object {
                                    "name": "password",
                                  }
                                }
                                data-__meta={
                                  Object {
                                    "initialValue": "",
                                    "name": "password",
                                    "originalProps": Object {
                                      "name": "password",
                                      "onChange": [Function],
                                      "placeholder": "*****",
                                      "prefix": <Icon
                                        style={
                                          Object {
                                            "color": "rgba(0,0,0,.25)",
                                          }
                                        }
                                        type="lock"
                                      />,
                                      "type": "password",
                                    },
                                    "ref": null,
                                    "rules": Array [
                                      Object {
                                        "message": "This field is required",
                                        "required": true,
                                      },
                                      Object {
                                        "validator": Object {
                                          "validator": [Function],
                                        },
                                      },
                                    ],
                                    "trigger": "onChange",
                                    "validate": Array [
                                      Object {
                                        "rules": Array [
                                          Object {
                                            "message": "This field is required",
                                            "required": true,
                                          },
                                          Object {
                                            "validator": Object {
                                              "validator": [Function],
                                            },
                                          },
                                        ],
                                        "trigger": Array [
                                          "onChange",
                                        ],
                                      },
                                    ],
                                    "valuePropName": "value",
                                  }
                                }
                                id="password"
                                name="password"
                                onChange={[Function]}
                                placeholder="*****"
                                prefix={
                                  <Icon
                                    style={
                                      Object {
                                        "color": "rgba(0,0,0,.25)",
                                      }
                                    }
                                    type="lock"
                                  />
                                }
                                type="password"
                                value=""
                              >
                                <span
                                  className="ant-input-affix-wrapper"
                                >
                                  <span
                                    className="ant-input-prefix"
                                  >
                                    <Icon
                                      style={
                                        Object {
                                          "color": "rgba(0,0,0,.25)",
                                        }
                                      }
                                      type="lock"
                                    >
                                      <LocaleReceiver
                                        componentName="Icon"
                                      >
                                        <i
                                          aria-label="icon: lock"
                                          className="anticon anticon-lock"
                                          style={
                                            Object {
                                              "color": "rgba(0,0,0,.25)",
                                            }
                                          }
                                        >
                                          <IconReact
                                            className=""
                                            type="lock-o"
                                          >
                                            <svg
                                              aria-hidden="true"
                                              className=""
                                              data-icon="lock"
                                              fill="currentColor"
                                              focusable="false"
                                              height="1em"
                                              key="svg-lock"
                                              viewBox="64 64 896 896"
                                              width="1em"
                                            >
                                              <path
                                                d="M832 464h-68V240c0-70.7-57.3-128-128-128H388c-70.7 0-128 57.3-128 128v224h-68c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V496c0-17.7-14.3-32-32-32zM332 240c0-30.9 25.1-56 56-56h248c30.9 0 56 25.1 56 56v224H332V240zm460 600H232V536h560v304zM484 701v53c0 4.4 3.6 8 8 8h40c4.4 0 8-3.6 8-8v-53a48.01 48.01 0 1 0-56 0z"
                                                key="svg-lock-svg-0"
                                              />
                                            </svg>
                                          </IconReact>
                                        </i>
                                      </LocaleReceiver>
                                    </Icon>
                                  </span>
                                  <input
                                    className="ant-input"
                                    data-__field={
                                      Object {
                                        "name": "password",
                                      }
                                    }
                                    data-__meta={
                                      Object {
                                        "initialValue": "",
                                        "name": "password",
                                        "originalProps": Object {
                                          "name": "password",
                                          "onChange": [Function],
                                          "placeholder": "*****",
                                          "prefix": <Icon
                                            style={
                                              Object {
                                                "color": "rgba(0,0,0,.25)",
                                              }
                                            }
                                            type="lock"
                                          />,
                                          "type": "password",
                                        },
                                        "ref": null,
                                        "rules": Array [
                                          Object {
                                            "message": "This field is required",
                                            "required": true,
                                          },
                                          Object {
                                            "validator": Object {
                                              "validator": [Function],
                                            },
                                          },
                                        ],
                                        "trigger": "onChange",
                                        "validate": Array [
                                          Object {
                                            "rules": Array [
                                              Object {
                                                "message": "This field is required",
                                                "required": true,
                                              },
                                              Object {
                                                "validator": Object {
                                                  "validator": [Function],
                                                },
                                              },
                                            ],
                                            "trigger": Array [
                                              "onChange",
                                            ],
                                          },
                                        ],
                                        "valuePropName": "value",
                                      }
                                    }
                                    id="password"
                                    name="password"
                                    onChange={[Function]}
                                    onKeyDown={[Function]}
                                    placeholder="*****"
                                    style={null}
                                    type="password"
                                    value=""
                                  />
                                </span>
                              </Input>
                            </span>
                            <Animate
                              animation={Object {}}
                              component=""
                              componentProps={Object {}}
                              key="help"
                              onAppear={[Function]}
                              onEnd={[Function]}
                              onEnter={[Function]}
                              onLeave={[Function]}
                              transitionAppear={true}
                              transitionEnter={true}
                              transitionLeave={true}
                              transitionName="show-help"
                            />
                          </div>
                        </div>
                      </Col>
                    </div>
                  </Row>
                </FormItem>
                <FormItem
                  data-test=""
                  hasFeedback={true}
                  label="Confirm Password"
                >
                  <Row
                    className="ant-form-item"
                    gutter={0}
                    key="row"
                  >
                    <div
                      className="ant-row ant-form-item"
                    >
                      <Col
                        className="ant-form-item-label"
                      >
                        <div
                          className="ant-col ant-form-item-label"
                        >
                          <label
                            className="ant-form-item-required"
                            htmlFor="confirm_password"
                            onClick={[Function]}
                            title="Confirm Password"
                          >
                            Confirm Password
                          </label>
                        </div>
                      </Col>
                      <Col
                        className="ant-form-item-control-wrapper"
                      >
                        <div
                          className="ant-col ant-form-item-control-wrapper"
                        >
                          <div
                            className="ant-form-item-control"
                          >
                            <span
                              className="ant-form-item-children"
                            >
                              <Input
                                data-__field={
                                  Object {
                                    "name": "confirm_password",
                                  }
                                }
                                data-__meta={
                                  Object {
                                    "initialValue": "",
                                    "name": "confirm_password",
                                    "originalProps": Object {
                                      "name": "confirm_password",
                                      "onChange": [Function],
                                      "placeholder": "*****",
                                      "prefix": <Icon
                                        style={
                                          Object {
                                            "color": "rgba(0,0,0,.25)",
                                          }
                                        }
                                        type="lock"
                                      />,
                                      "type": "password",
                                    },
                                    "ref": null,
                                    "rules": Array [
                                      Object {
                                        "message": "This field is required",
                                        "required": true,
                                      },
                                      Object {
                                        "validator": Object {
                                          "validator": [Function],
                                        },
                                      },
                                    ],
                                    "trigger": "onChange",
                                    "validate": Array [
                                      Object {
                                        "rules": Array [
                                          Object {
                                            "message": "This field is required",
                                            "required": true,
                                          },
                                          Object {
                                            "validator": Object {
                                              "validator": [Function],
                                            },
                                          },
                                        ],
                                        "trigger": Array [
                                          "onChange",
                                        ],
                                      },
                                    ],
                                    "valuePropName": "value",
                                  }
                                }
                                id="confirm_password"
                                name="confirm_password"
                                onChange={[Function]}
                                placeholder="*****"
                                prefix={
                                  <Icon
                                    style={
                                      Object {
                                        "color": "rgba(0,0,0,.25)",
                                      }
                                    }
                                    type="lock"
                                  />
                                }
                                type="password"
                                value=""
                              >
                                <span
                                  className="ant-input-affix-wrapper"
                                >
                                  <span
                                    className="ant-input-prefix"
                                  >
                                    <Icon
                                      style={
                                        Object {
                                          "color": "rgba(0,0,0,.25)",
                                        }
                                      }
                                      type="lock"
                                    >
                                      <LocaleReceiver
                                        componentName="Icon"
                                      >
                                        <i
                                          aria-label="icon: lock"
                                          className="anticon anticon-lock"
                                          style={
                                            Object {
                                              "color": "rgba(0,0,0,.25)",
                                            }
                                          }
                                        >
                                          <IconReact
                                            className=""
                                            type="lock-o"
                                          >
                                            <svg
                                              aria-hidden="true"
                                              className=""
                                              data-icon="lock"
                                              fill="currentColor"
                                              focusable="false"
                                              height="1em"
                                              key="svg-lock"
                                              viewBox="64 64 896 896"
                                              width="1em"
                                            >
                                              <path
                                                d="M832 464h-68V240c0-70.7-57.3-128-128-128H388c-70.7 0-128 57.3-128 128v224h-68c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V496c0-17.7-14.3-32-32-32zM332 240c0-30.9 25.1-56 56-56h248c30.9 0 56 25.1 56 56v224H332V240zm460 600H232V536h560v304zM484 701v53c0 4.4 3.6 8 8 8h40c4.4 0 8-3.6 8-8v-53a48.01 48.01 0 1 0-56 0z"
                                                key="svg-lock-svg-0"
                                              />
                                            </svg>
                                          </IconReact>
                                        </i>
                                      </LocaleReceiver>
                                    </Icon>
                                  </span>
                                  <input
                                    className="ant-input"
                                    data-__field={
                                      Object {
                                        "name": "confirm_password",
                                      }
                                    }
                                    data-__meta={
                                      Object {
                                        "initialValue": "",
                                        "name": "confirm_password",
                                        "originalProps": Object {
                                          "name": "confirm_password",
                                          "onChange": [Function],
                                          "placeholder": "*****",
                                          "prefix": <Icon
                                            style={
                                              Object {
                                                "color": "rgba(0,0,0,.25)",
                                              }
                                            }
                                            type="lock"
                                          />,
                                          "type": "password",
                                        },
                                        "ref": null,
                                        "rules": Array [
                                          Object {
                                            "message": "This field is required",
                                            "required": true,
                                          },
                                          Object {
                                            "validator": Object {
                                              "validator": [Function],
                                            },
                                          },
                                        ],
                                        "trigger": "onChange",
                                        "validate": Array [
                                          Object {
                                            "rules": Array [
                                              Object {
                                                "message": "This field is required",
                                                "required": true,
                                              },
                                              Object {
                                                "validator": Object {
                                                  "validator": [Function],
                                                },
                                              },
                                            ],
                                            "trigger": Array [
                                              "onChange",
                                            ],
                                          },
                                        ],
                                        "valuePropName": "value",
                                      }
                                    }
                                    id="confirm_password"
                                    name="confirm_password"
                                    onChange={[Function]}
                                    onKeyDown={[Function]}
                                    placeholder="*****"
                                    style={null}
                                    type="password"
                                    value=""
                                  />
                                </span>
                              </Input>
                            </span>
                            <Animate
                              animation={Object {}}
                              component=""
                              componentProps={Object {}}
                              key="help"
                              onAppear={[Function]}
                              onEnd={[Function]}
                              onEnter={[Function]}
                              onLeave={[Function]}
                              transitionAppear={true}
                              transitionEnter={true}
                              transitionLeave={true}
                              transitionName="show-help"
                            />
                          </div>
                        </div>
                      </Col>
                    </div>
                  </Row>
                </FormItem>
                <FormItem
                  hasFeedback={false}
                >
                  <Row
                    className="ant-form-item"
                    gutter={0}
                    key="row"
                  >
                    <div
                      className="ant-row ant-form-item"
                    >
                      <Col
                        className="ant-form-item-control-wrapper"
                      >
                        <div
                          className="ant-col ant-form-item-control-wrapper"
                        >
                          <div
                            className="ant-form-item-control"
                          >
                            <span
                              className="ant-form-item-children"
                            >
                              <Button
                                block={true}
                                className="login-form-button"
                                data-test="submit-button"
                                ghost={false}
                                htmlType="submit"
                                loading={false}
                                type="primary"
                              >
                                <Wave>
                                  <button
                                    className="ant-btn login-form-button ant-btn-primary ant-btn-block"
                                    data-test="submit-button"
                                    onClick={[Function]}
                                    type="submit"
                                  >
                                    <span
                                      key=".0"
                                    >
                                      Reset Password
                                    </span>
                                  </button>
                                </Wave>
                              </Button>
                            </span>
                            <Animate
                              animation={Object {}}
                              component=""
                              componentProps={Object {}}
                              key="help"
                              onAppear={[Function]}
                              onEnd={[Function]}
                              onEnter={[Function]}
                              onLeave={[Function]}
                              transitionAppear={true}
                              transitionEnter={true}
                              transitionLeave={true}
                              transitionName="show-help"
                            />
                          </div>
                        </div>
                      </Col>
                    </div>
                  </Row>
                </FormItem>
              </form>
            </Form>
          </ResetConfirm>
        </withRouter(ResetConfirm)>
      </Form(withRouter(ResetConfirm))>
    </Connect(Form(withRouter(ResetConfirm)))>
  </Provider>
</Router>
`;

exports[`Tests PasswordResetConfirmContainer Test mounting of component 2`] = `
<Router
  history={
    Object {
      "action": "POP",
      "block": [Function],
      "createHref": [Function],
      "go": [Function],
      "goBack": [Function],
      "goForward": [Function],
      "length": 1,
      "listen": [Function],
      "location": Object {
        "hash": "",
        "pathname": "/",
        "search": "",
        "state": undefined,
      },
      "push": [Function],
      "replace": [Function],
    }
  }
>
  <Provider
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  >
    <Connect(Form(PasswordReset))
      history={
        Object {
          "push": [MockFunction],
        }
      }
      match={
        Object {
          "params": Object {
            "token": "tcvygbuhijn6789",
          },
        }
      }
      showModal={[MockFunction]}
    >
      <Form(PasswordReset)
        history={
          Object {
            "push": [MockFunction],
          }
        }
        match={
          Object {
            "params": Object {
              "token": "tcvygbuhijn6789",
            },
          }
        }
        resetPasswordActions={[Function]}
        showModal={[MockFunction]}
      >
        <PasswordReset
          form={
            Object {
              "getFieldDecorator": [Function],
              "getFieldError": [Function],
              "getFieldInstance": [Function],
              "getFieldProps": [Function],
              "getFieldValue": [Function],
              "getFieldsError": [Function],
              "getFieldsValue": [Function],
              "isFieldTouched": [Function],
              "isFieldValidating": [Function],
              "isFieldsTouched": [Function],
              "isFieldsValidating": [Function],
              "isSubmitting": [Function],
              "resetFields": [Function],
              "setFields": [Function],
              "setFieldsInitialValue": [Function],
              "setFieldsValue": [Function],
              "submit": [Function],
              "validateFields": [Function],
              "validateFieldsAndScroll": [Function],
            }
          }
          history={
            Object {
              "push": [MockFunction],
            }
          }
          match={
            Object {
              "params": Object {
                "token": "tcvygbuhijn6789",
              },
            }
          }
          resetPasswordActions={[Function]}
          showModal={[MockFunction]}
        >
          <Form
            className="reset-form"
            colon={true}
            hideRequiredMark={false}
            layout="horizontal"
            onSubmit={[Function]}
            style={
              Object {
                "textAlign": "left",
              }
            }
          >
            <form
              className="ant-form ant-form-horizontal reset-form"
              onSubmit={[Function]}
              style={
                Object {
                  "textAlign": "left",
                }
              }
            >
              <div>
                <h1>
                  Forgot Password
                </h1>
              </div>
              <FormItem
                data-test="email"
                hasFeedback={false}
                label="Email"
              >
                <Row
                  className="ant-form-item"
                  gutter={0}
                  key="row"
                >
                  <div
                    className="ant-row ant-form-item"
                  >
                    <Col
                      className="ant-form-item-label"
                    >
                      <div
                        className="ant-col ant-form-item-label"
                      >
                        <label
                          className="ant-form-item-required"
                          htmlFor="email"
                          onClick={[Function]}
                          title="Email"
                        >
                          Email
                        </label>
                      </div>
                    </Col>
                    <Col
                      className="ant-form-item-control-wrapper"
                    >
                      <div
                        className="ant-col ant-form-item-control-wrapper"
                      >
                        <div
                          className="ant-form-item-control"
                        >
                          <span
                            className="ant-form-item-children"
                          >
                            <Input
                              data-__field={
                                Object {
                                  "name": "email",
                                }
                              }
                              data-__meta={
                                Object {
                                  "initialValue": "",
                                  "name": "email",
                                  "originalProps": Object {
                                    "name": "email",
                                    "onChange": [Function],
                                    "placeholder": "johndoe@example.com",
                                    "prefix": <Icon
                                      style={
                                        Object {
                                          "color": "rgba(0,0,0,.25)",
                                        }
                                      }
                                      type="user"
                                    />,
                                    "type": "email",
                                  },
                                  "ref": null,
                                  "rules": Array [
                                    Object {
                                      "message": "This field is required",
                                      "required": true,
                                    },
                                    Object {
                                      "validator": Object {
                                        "validator": "",
                                      },
                                    },
                                  ],
                                  "trigger": "onChange",
                                  "validate": Array [
                                    Object {
                                      "rules": Array [
                                        Object {
                                          "message": "This field is required",
                                          "required": true,
                                        },
                                        Object {
                                          "validator": Object {
                                            "validator": "",
                                          },
                                        },
                                      ],
                                      "trigger": Array [
                                        "onChange",
                                      ],
                                    },
                                  ],
                                  "valuePropName": "value",
                                }
                              }
                              id="email"
                              name="email"
                              onChange={[Function]}
                              placeholder="johndoe@example.com"
                              prefix={
                                <Icon
                                  style={
                                    Object {
                                      "color": "rgba(0,0,0,.25)",
                                    }
                                  }
                                  type="user"
                                />
                              }
                              type="email"
                              value=""
                            >
                              <span
                                className="ant-input-affix-wrapper"
                              >
                                <span
                                  className="ant-input-prefix"
                                >
                                  <Icon
                                    style={
                                      Object {
                                        "color": "rgba(0,0,0,.25)",
                                      }
                                    }
                                    type="user"
                                  >
                                    <LocaleReceiver
                                      componentName="Icon"
                                    >
                                      <i
                                        aria-label="icon: user"
                                        className="anticon anticon-user"
                                        style={
                                          Object {
                                            "color": "rgba(0,0,0,.25)",
                                          }
                                        }
                                      >
                                        <IconReact
                                          className=""
                                          type="user-o"
                                        >
                                          <svg
                                            aria-hidden="true"
                                            className=""
                                            data-icon="user"
                                            fill="currentColor"
                                            focusable="false"
                                            height="1em"
                                            key="svg-user"
                                            viewBox="64 64 896 896"
                                            width="1em"
                                          >
                                            <path
                                              d="M858.5 763.6a374 374 0 0 0-80.6-119.5 375.63 375.63 0 0 0-119.5-80.6c-.4-.2-.8-.3-1.2-.5C719.5 518 760 444.7 760 362c0-137-111-248-248-248S264 225 264 362c0 82.7 40.5 156 102.8 201.1-.4.2-.8.3-1.2.5-44.8 18.9-85 46-119.5 80.6a375.63 375.63 0 0 0-80.6 119.5A371.7 371.7 0 0 0 136 901.8a8 8 0 0 0 8 8.2h60c4.4 0 7.9-3.5 8-7.8 2-77.2 33-149.5 87.8-204.3 56.7-56.7 132-87.9 212.2-87.9s155.5 31.2 212.2 87.9C779 752.7 810 825 812 902.2c.1 4.4 3.6 7.8 8 7.8h60a8 8 0 0 0 8-8.2c-1-47.8-10.9-94.3-29.5-138.2zM512 534c-45.9 0-89.1-17.9-121.6-50.4S340 407.9 340 362c0-45.9 17.9-89.1 50.4-121.6S466.1 190 512 190s89.1 17.9 121.6 50.4S684 316.1 684 362c0 45.9-17.9 89.1-50.4 121.6S557.9 534 512 534z"
                                              key="svg-user-svg-0"
                                            />
                                          </svg>
                                        </IconReact>
                                      </i>
                                    </LocaleReceiver>
                                  </Icon>
                                </span>
                                <input
                                  className="ant-input"
                                  data-__field={
                                    Object {
                                      "name": "email",
                                    }
                                  }
                                  data-__meta={
                                    Object {
                                      "initialValue": "",
                                      "name": "email",
                                      "originalProps": Object {
                                        "name": "email",
                                        "onChange": [Function],
                                        "placeholder": "johndoe@example.com",
                                        "prefix": <Icon
                                          style={
                                            Object {
                                              "color": "rgba(0,0,0,.25)",
                                            }
                                          }
                                          type="user"
                                        />,
                                        "type": "email",
                                      },
                                      "ref": null,
                                      "rules": Array [
                                        Object {
                                          "message": "This field is required",
                                          "required": true,
                                        },
                                        Object {
                                          "validator": Object {
                                            "validator": "",
                                          },
                                        },
                                      ],
                                      "trigger": "onChange",
                                      "validate": Array [
                                        Object {
                                          "rules": Array [
                                            Object {
                                              "message": "This field is required",
                                              "required": true,
                                            },
                                            Object {
                                              "validator": Object {
                                                "validator": "",
                                              },
                                            },
                                          ],
                                          "trigger": Array [
                                            "onChange",
                                          ],
                                        },
                                      ],
                                      "valuePropName": "value",
                                    }
                                  }
                                  id="email"
                                  name="email"
                                  onChange={[Function]}
                                  onKeyDown={[Function]}
                                  placeholder="johndoe@example.com"
                                  style={null}
                                  type="email"
                                  value=""
                                />
                              </span>
                            </Input>
                          </span>
                          <Animate
                            animation={Object {}}
                            component=""
                            componentProps={Object {}}
                            key="help"
                            onAppear={[Function]}
                            onEnd={[Function]}
                            onEnter={[Function]}
                            onLeave={[Function]}
                            transitionAppear={true}
                            transitionEnter={true}
                            transitionLeave={true}
                            transitionName="show-help"
                          />
                        </div>
                      </div>
                    </Col>
                  </div>
                </Row>
              </FormItem>
              <div>
                <FormItem
                  hasFeedback={false}
                >
                  <Row
                    className="ant-form-item"
                    gutter={0}
                    key="row"
                  >
                    <div
                      className="ant-row ant-form-item"
                    >
                      <Col
                        className="ant-form-item-control-wrapper"
                      >
                        <div
                          className="ant-col ant-form-item-control-wrapper"
                        >
                          <div
                            className="ant-form-item-control"
                          >
                            <span
                              className="ant-form-item-children"
                            >
                              <Button
                                block={true}
                                className="login-form-button"
                                data-test="submit-button"
                                ghost={false}
                                htmlType="submit"
                                loading={false}
                                type="primary"
                              >
                                <Wave>
                                  <button
                                    className="ant-btn login-form-button ant-btn-primary ant-btn-block"
                                    data-test="submit-button"
                                    onClick={[Function]}
                                    type="submit"
                                  >
                                    <span
                                      key=".0"
                                    >
                                      Send Reset Password Email
                                    </span>
                                  </button>
                                </Wave>
                              </Button>
                            </span>
                            <Animate
                              animation={Object {}}
                              component=""
                              componentProps={Object {}}
                              key="help"
                              onAppear={[Function]}
                              onEnd={[Function]}
                              onEnter={[Function]}
                              onLeave={[Function]}
                              transitionAppear={true}
                              transitionEnter={true}
                              transitionLeave={true}
                              transitionName="show-help"
                            />
                          </div>
                        </div>
                      </Col>
                    </div>
                  </Row>
                </FormItem>
                <Link
                  to="/"
                >
                  <a
                    href="/"
                    onClick={[Function]}
                  >
                    Go Back Home
                  </a>
                </Link>
              </div>
            </form>
          </Form>
        </PasswordReset>
      </Form(PasswordReset)>
    </Connect(Form(PasswordReset))>
  </Provider>
</Router>
`;
